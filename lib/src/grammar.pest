// LITERALS
literal = { char_literal | string_literal | float_literal | number_literal | boolean_literal }
    float_literal = @{ "-"? ~ ASCII_DIGIT+ ~ "." ~ ASCII_DIGIT* ~ (^"e" ~ ("+" | "-")? ~ ASCII_DIGIT+)? }
    number_literal = @{ "-"? ~ ASCII_DIGIT+ }
    boolean_literal = @{ "true" | "false" }
    char_literal = ${ "'" ~ char ~ "'" }
        char      = @{ escape | ANY }
    string_literal = ${ "\"" ~ inner_string ~ "\"" }
        inner_string = @{ (!("\"" | "\\") ~ ANY)* ~ (escape ~ inner_string)? }
        escape    = @{ "\\" ~ ("\"" | "\\" | "r" | "n" | "t" | "0" | "'" | code | unicode) }
        code      = @{ "x" ~ ASCII_HEX_DIGIT{2} }
        unicode   = @{ "u" ~ "{" ~ ASCII_HEX_DIGIT{2, 6} ~ "}" }
// END LITERALS

// STATEMENTS
ty = @{ ASCII_ALPHA_UPPER ~ ASCII_ALPHA_LOWER+ }
ident = @{ (ASCII_ALPHA_LOWER | "_")+ }
fn_call = { ident ~ "(" ~ (expr ~ ",")* ~ expr? ~ ")" }
expr = { literal | fn_call | ident }
fn_args = _{ "(" ~ (ident ~ ":" ~ ty ~ ",")* ~ (ident ~ ":" ~ ty)? ~ ")" }
fn_decl = { "fn" ~ ident ~ fn_args ~ "->" ~ ty ~ block }
var_decl = _{ let_var | mut_var | reassign_var }
    let_var = { "let" ~ ident ~ "=" ~ expr }
    mut_var = { "mut" ~ ident ~ "=" ~ expr }
    reassign_var = { ident ~ "=" ~ expr }
if_stmt = { "if" ~ expr ~ block ~ ("else" ~ "if" ~ expr ~ block)* ~ "else" ~ block }
answer_stmt = { "answer" ~ expr }
// END STATEMENTS

WHITESPACE = _{ " " | "\t" | NEWLINE }
block_comment = _{ "-{" ~ (block_comment | !"}-" ~ ANY)* ~ "}-" }
COMMENT = _{ block_comment | "--" ~ (!NEWLINE ~ ANY) }
stmt = _{ fn_decl | var_decl | if_stmt | answer_stmt | expr }
block = { "{" ~ stmt* ~ "}" }
program = { SOI ~ stmt+ ~ EOI }
